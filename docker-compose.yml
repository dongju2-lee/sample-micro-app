version: "3.8"

services:
  user-service:
    build: ./user-service
    ports:
      - "8001:8000"
    networks:
      - food-delivery
      - monitoring
    environment:
      - DB_URL=postgresql://user:pass@user-db:5432/user
      - JWT_SECRET=mysecretkey
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./shared:/app/shared
      - microservices_logs:/var/log/microservices
    user: root
    depends_on:
      - user-db
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  user-db:
    image: postgres:13
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=user
    volumes:
      - user-data:/var/lib/postgresql/data
    networks:
      - food-delivery
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 10s
      timeout: 5s
      retries: 5

  restaurant-service:
    build: ./restaurant-service
    ports:
      - "8002:8000"
    networks:
      - food-delivery
      - monitoring
    environment:
      - DB_URL=postgresql://restaurant:pass@restaurant-db:5432/restaurant
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - ./shared:/app/shared
      - microservices_logs:/var/log/microservices
    user: root
    depends_on:
      - restaurant-db
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  restaurant-db:
    image: postgres:13
    environment:
      - POSTGRES_USER=restaurant
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=restaurant
    volumes:
      - restaurant-data:/var/lib/postgresql/data
    networks:
      - food-delivery
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U restaurant"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - food-delivery
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  order-service:
    build: ./order-service
    ports:
      - "8003:8000"
    networks:
      - food-delivery
      - monitoring
    environment:
      - DB_URL=postgresql://order:pass@order-db:5432/order
      - USER_SERVICE_URL=http://user-service:8000
      - RESTAURANT_SERVICE_URL=http://restaurant-service:8000
      - REDIS_URL=redis://redis:6379/2
    volumes:
      - ./shared:/app/shared
      - microservices_logs:/var/log/microservices
    user: root
    depends_on:
      - order-db
      - user-service
      - restaurant-service
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  order-db:
    image: postgres:13
    environment:
      - POSTGRES_USER=order
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=order
    volumes:
      - order-data:/var/lib/postgresql/data
    networks:
      - food-delivery
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U order"]
      interval: 10s
      timeout: 5s
      retries: 5

  load-balancer:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - user-service
      - restaurant-service
      - order-service
    networks:
      - food-delivery
    restart: unless-stopped

networks:
  food-delivery:
    driver: bridge
  monitoring:
    external: true

volumes:
  user-data:
  restaurant-data:
  order-data:
  redis-data:
  microservices_logs:
    driver: local
