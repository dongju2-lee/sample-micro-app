version: "3.8"

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data: {}
  loki_data: {}
  loki_wal: {}
  tempo_data: {}
  grafana_data: {}
  sample-micro-app_microservices_logs:
    external: true

services:
  # Prometheus - 메트릭 수집 및 저장
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    networks:
      - monitoring

  # Node Exporter - 시스템 메트릭 수집
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - monitoring

  # Loki - 로그 수집 및 저장
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    user: root
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
      - loki_wal:/wal
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring

  # Promtail - 로그 수집기
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    user: root
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml
      - sample-micro-app_microservices_logs:/var/log/microservices:ro
    command: -config.file=/etc/promtail/config.yml
    ports:
      - "9080:9080"
    networks:
      - monitoring
    depends_on:
      - loki

  # Tempo - 분산 추적 시스템
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    restart: unless-stopped
    user: root
    volumes:
      - ./tempo/tempo-config.yml:/etc/tempo/config.yml
      - tempo_data:/tmp/tempo
    command: -config.file=/etc/tempo/config.yml
    ports:
      - "3200:3200" # tempo
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "9411:9411" # zipkin 호환 API
    networks:
      - monitoring

  # Grafana - 데이터 시각화
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      # 렌더러 설정 추가
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      - GF_LOG_FILTERS=rendering:debug
    ports:
      - "3000:3000"
    networks:
      - monitoring
    depends_on:
      - prometheus
      - loki
      - tempo
      - renderer
  
  # Grafana 이미지 렌더러
  renderer:
    image: grafana/grafana-image-renderer:latest
    container_name: renderer
    restart: unless-stopped
    user: root
    environment:
      - ENABLE_METRICS=true
    ports:
      - "9581:8081"
    networks:
      - monitoring
